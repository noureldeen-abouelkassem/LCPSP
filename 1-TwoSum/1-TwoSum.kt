            when {
            }
        }
                left + right == target -> return intArrayOf(nums.indexOfFirst{it == left}, nums.indexOfLast
                left + right > target -> rightPointer--
            val right = numsSorted[rightPointer]
                left + right < target -> leftPointer++
            println(left)
            println(right)
        return intArrayOf()
    }
            val left = numsSorted[leftPointer]
        while(leftPointer < rightPointer){
{it == right})
}
[
